<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>每週練習內容</h1>
<h2>week2</h2>
<h2>week3</h2>
<p>先將 Y:\portablegit\bin\sh.exe 改名為 sh_rename_for_solvespace.exe</p>
<p>re sh.exe sh_rename_for_solvespace.exe</p>
<p><span>*p.s.  re 是重新命名的指令</span></p>
<p><span>git version 查驗 git 版本 ( 需要git 2.13 版本以上 )</span></p>
<p><span>git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace</span></p>
<p>*p.s. <span>使用  git clone </span><span>--recurse-submodules 取得所有子模組資料，clone 前請先確認</span></p>
<p><span>是否有重複檔名的資料，並耐心等候取得資料，以確保檔案完整性</span></p>
<p>上述指令同:</p>
<p>git clone <span><a href="https://github.com/solvespace/solvespace.git">https://github.com/solvespace/solvespace.git</a> </span></p>
<p><span>cd solvespace</span></p>
<p><span>git submodule init</span></p>
<p><span>git submodule update</span></p>
<p><span>編輯 Y:\tmp\solvespace\extlib\angle\CMakeLists.txt 將 713 行和 714行註解掉，像底下這樣</span></p>
<p><span>#list(APPEND ANGLE_DEFINITIONS<br/><span>#"-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \"d3dcompiler_47.dll\", \"d3dcompiler_46.dll\", \"d3dcompiler_43.dll\" }")</span><br/><span>endif()</span></span></p>
<p>*p.s.  漏掉此步驟，否則後續編譯會有錯誤</p>
<p>到 <span>Y:\tmp\solvespace\extlib\libpng 目錄底下新建名為 build目錄</span></p>
<p>cd solvespace </p>
<p>cd extlib</p>
<p>cd libpng</p>
<p>mkdir build</p>
<p>cd build</p>
<p>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</p>
<p>mingw32-make</p>
<p><span><span>重新命名 Y:\tmp\solvespace\extlib\libpng\build\libpng.dll.a 改名為 libpng_static.a 並且複製到 Y:\msys64\mingw64\lib</span></span></p>
<p><span><span>回到 Y:\tmp\solvespace 目錄下新建名為 build目錄</span></span></p>
<p>mkdir build</p>
<p>cd build</p>
<p>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</p>
<p>mingw32-make</p>
<p>完成以上編譯後執行 <span>Y:</span>tmp\solvespace\build\bin\solvespace.exe   ，若能成功執行就能確定完成 Solvespace 編譯</p>
<h2>week5</h2>
<p><span>Solvespace 操作與繪圖示範</span></p>
<p><span><a href="https://www.youtube.com/watch?v=5d9P6qI9fso">https://www.youtube.com/watch?v=5d9P6qI9fso</a></span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5d9P6qI9fso" width="560"></iframe></p>
<h2>week6</h2>
<p><span>V-rep 雙輪車控制模擬</span></p>
<p><a href="https://www.youtube.com/watch?v=0epAzqDpHDk">https://www.youtube.com/watch?v=0epAzqDpHDk</a></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0epAzqDpHDk" width="560"></iframe></p>
<p><span></span></p><h2>week7</h2>
<p><span>分組網站統一規格</span></p>
<p><span></span></p>
<p><span><img alt="" height="281" src="/images/W7小組統一.jpg" width="500"/></span></p>
<h2>week8</h2>
<h2>week9</h2>
<h2>week15</h2>
<h2>week16</h2>
<p>請 2a 各學員根據<span> </span><a href="http://mde.tw/cad2019/content/Task2.html" rel="nofollow">Task2</a><span> </span>中<span> </span><a href="https://cad.onshape.com/documents/0c757e42f113318abade702c/w/83a3818a1aef5d4234265d9c/e/0284daee1c8866acdbcf0b9d" rel="nofollow">Onshpae 越野車零組件</a>之尺寸與配置, 利用 Solvespace 完成簡化後的越野車零組件設計繪圖.</p>
<p>完成後請將所有零組件檔案, 放入個人倉儲 downloads 目錄中的 solvespace 子目錄, 然後將越野車組立件, 以 STL 格式轉出後, 轉入 V-rep 後, 將 ttt 檔案放入個人倉儲 downloads 目錄中的 solvespace 子目錄.</p>
<p>並將越野車組立件, 以 WRL 格式轉出後, 轉入 Webots 後, 將 wbt 檔案放入個人倉儲 downloads 目錄中的 solvespace 子目錄.</p>
<p>完成上述查驗任務後, 請將簡要過程拍成至多 3 分鐘的帶說明字幕導覽影片, 並將影片嵌入 W16 查驗頁面後, 將提交連結, 頁面連結與影片連結放入下列回應中, 附上操作心得, 並針對所碰到的問題進行說明討論</p>
<p><a href="https://www.youtube.com/watch?v=0KKwCIYgx3s">https://www.youtube.com/watch?v=0KKwCIYgx3s</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0KKwCIYgx3s" width="560"></iframe></p>
<p></p><h2>week17</h2>
<p>Model definition</p>
<p>Now we are ready to define our model. We start by building the model herarchy: we attach the last dynamic robot link (<em>robot_link_dyn6</em>) to its corresponding joint (<em>robot_joint6</em>) by selecting <em>robot_link_dyn6</em>, then control-selecting <em>robot_joint6</em>, then [Menu bar --&gt; Edit --&gt; Make last selected object parent]. We could also have done this step by simply dragging object <em>robot_link_dyn6</em> onto <em>robot_link6</em> in the<span style="color: #ff0000;"> <a href="http://www.coppeliarobotics.com/helpFiles/en/userInterface.htm#SceneHierarchy" style="color: #ff0000;"><strong>scene hierarchy</strong></a></span><strong>.</strong> We go on by now attaching <em>robot_joint6</em> to <em>robot_link_dyn5</em>, and so on, until arrived at the base of the robot. We now have following scene hierarchy:</p>
<p>型號定義</p>
<p><br/> 現在我們準備定義模型了。 我們從建立模型層次結構開始：通過選擇<span>robot_link_dyn6</span>，然後控制選擇<span>robot_joint6</span>，然後選擇<span>[</span>菜單欄<span>-&gt;</span>編輯<span>-&gt;</span>創建最後一個選定的對象，將最後一個動態機器人鏈接（<span>robot_link_dyn6</span>）附加到其相應的關節（<span>robot_joint6</span>）。對應的點<span>]</span>。 我們還可以通過簡單地將對象<span>robot_link_dyn6</span>拖到<strong><span style="color: #ff0000;">場景層次</span></strong>結構中的<span>robot_link6</span>上來完成此步驟。 現在，我們將<span>robot_joint6</span>附加到<span>robot_link_dyn5</span>上，依此類推，直到到達機器人的底部。 現在，我們具有以下場景層次結構：</p>
<p><img alt="" height="579" src="/images/1.jpg" width="351"/></p>
<p style="text-align: center;">[Robot model hierarchy]</p>
<p style="text-align: center;">[機器人模型層次結構]</p>
<p style="text-align: center;"></p>
<p>It is nice and more logical to have a simple name for the model base, since the model base will also represent the model itself. So we rename robot to robot_visibleBase, and robot_dyn to robot. Now we select the base of the hierarchy tree (i.e. object robot) and in the<strong> object common properties </strong>we enable <strong>Object is model base</strong>. We also enable <strong>Object/model can transfer or accept DNA</strong>. A model bounding box appeared, encompassing the whole robot. The bounding box however appears to be too large: this is because the bounding box also encompasses the invisible items, such as the joints. We now exclude the joints from the model bounding box by enabling the <strong>Don't show as inside model selection </strong>item for all joints. We could do the same procedure for all invisible items in our model. This is also a useful option in order to also exclude large sensors or other items from the model bounding box. We now have following situation:</p>
<p> 為模型庫起一個簡單的名字是很好而且更合乎邏輯的，因為模型庫也將代表模型本身。因此，我們將<span>robot</span>重命名為<span>robot_visibleBase</span>，並將<span>robot_dyn</span>重命名為<span>robot</span>。現在我們選擇層次結構樹的基礎（即對像機械手），並在<strong>對象公共屬性</strong>中啟用"<strong>對像是模型基礎</strong><span>''</span>。我們還使<strong>對象<span>/</span>模型可以轉移或接受<span>DNA</span></strong>。出現了一個模型包圍盒，包圍了整個機器人。但是，邊界框似乎太大：這是因為邊界框還包含不可見的項，例如關節。現在，通過對所有關節啟用<strong>“不顯示為內部模型”</strong>選擇項，將關節從模型邊界框中排除。我們可以對模型中的所有不可見項執行相同的過程。這也是一個有用的選項，可以將大型傳感器或其他項目也排除在模型邊界框之外。我們現在有以下情況：</p>
<p><img alt="" height="229" src="/images/2.jpg" width="550"/></p>
<p style="text-align: center;">[Robot model bounding box]</p>
<p style="text-align: center;">[機器人模型邊界框<span>]</span></p>
<p style="text-align: center;"><span></span></p>
<p>We now protect our model from accidental modification. We select all visible objects in the robot, then enable <strong>Select base of model instead</strong>: if we now click a visible link in the scene, the base of the robot will be selected instead. This allows us to manipulate the model as if it was a single object. We can still select visible objects in the robot via control-shift-clicking in the scene, or by selecting the object in the scene hierarchy. We now put the robot into a correct default position/orientation. First, we save current scene as a reference (e.g. if at a later stage we need to import CAD data that have the same orientation at the curent robot). Then we select the model and <span style="color: #ff0000;"><strong>modify its position/orientation</strong></span> appropriately. It is considered good practice to position the model (i.e. its base object) at X=0 and Y=0.</p>
<p> 現在，我們保護模型免受意外修改。我們選擇機器人中的所有可見對象，然後啟用<strong>“選擇模型的基礎”</strong>：如果現在單擊場景中的可見鏈接，則會改為選擇機器人的基礎。這使我們可以像對待單個對像一樣操作模型。我們仍然可以通過按住<span>Shift</span>鍵並單擊場景或在場景層次中選擇對象來選擇機器人中的可見對象。現在，我們將機器人置於正確的默認位置<span>/</span>方向。首先，我們將當前場景保存為參考（例如，如果稍後需要在當前機器人上導入方向相同的<span>CAD</span>數據）。然後，我們選擇模型並適當<span style="color: #ff0000;"><strong>修改其位置/方向</strong></span>。將模型（即其基礎對象）定位在<span>X = 0</span>和<span>Y = 0</span>處被認為是一種好習慣。</p>
<p><img caption="false" height="494" src="/images/3.jpg" width="624"/></p>
<p style="text-align: center;">[Robot model in default configuration]</p>
<p style="text-align: center;">[默認配置下的機器人型號<span>]</span></p>
<p>We now run the simulation: the robot will collapse, since the joints are not controlled by default. <span style="color: #ff0000;"><strong>When we added the joints in the previous stage</strong></span>, we created joints in force/torque mode, but their motor or controller was disabled (by default). We can now adjust our joints to our requirements. In our case, we want a simple PID controller for each one of them. In the joint dynamic properties, we click Motor <strong>enabled</strong> and adjust the <strong>maximum torque</strong>. We then click <strong>Control loop enabled</strong> and select <strong>Position control (PID)</strong>. We now run the simulation again: the robot should hold its position. Try to switch the current physics engine to see if the behaviour is consistent across all supported physics engines. You can do this via the appropriate<span style="color: #ff0000;"> <strong>toolbar button</strong></span>, or in the <span style="color: #ff0000;"><strong>general dynamics properties</strong></span>.</p>
<p> 現在我們運行模擬：由於默認情況下關節不受控制，因此機器人將崩潰。<span style="color: #ff0000;"><strong>在上一階段添加關節時</strong></span>，我們以力<span>/</span>扭矩模式創建了關節，但其電動機或控制器已禁用（默認情況下）。現在，我們可以根據需要調整關節。在我們的案例中，我們希望為每個控制器都提供一個簡單的<span>PID</span>控制器。在關節動態屬性中，單擊“<strong>啟用</strong>電機”並調整<strong>最大扭矩</strong>。然後，單擊<strong>啟用控制環</strong>，然後選擇<strong>位置控制（<span>PID</span>）</strong>。現在，我們再次運行仿真：機器人應保持其位置。嘗試切換當前的物理引擎，以查看行為在所有受支持的物理引擎之間是否一致。您可以通過相應的<span style="color: #ff0000;"><strong>工具欄按鈕</strong></span>或在<span style="color: #ff0000;"><strong>常規動力學屬性</strong></span>中執行此操作。</p>
<p> During simulation, we now verify the scene dynamic content via the<span style="color: #ff0000;"> <strong>Dynamic content visualization &amp; verification toolbar button</strong></span>. Now, only items that are taken into account by the physics engine will be display, and the display is<span style="color: #ff0000;"> <strong>color-coded</strong></span>. It is <strong>very important</strong> to always do this, and specially when your dynamic model doesn't behave as expected, in order to quickly debug the model. Similarly, always look at the scene hierarchy during simulation: dynamically enabled objects should display a ball-bounding icon on the right-hand side of their name.</p>
<p> <span>在仿真過程中，我們現在通過<span style="color: #ff0000;"><strong>“動態內容可視化和驗證”工具欄按鈕</strong></span>來驗證場景動態內容。現在，將僅顯示物理引擎考慮的項目，並且該顯示使用<span style="color: #ff0000;"><strong>顏色編碼</strong></span>。始終執行此操作<strong>非常重要</strong>，尤其是在動態模型無法按預期運行時，為了快速調試模型，尤其如此。同樣，在仿真過程中請始終查看場景層次：動態啟用的對象應在其名稱的右側顯示一個球形圖標。</span></p>
<p style="text-align: left;"><span><img alt="" height="519" src="/images/4.jpg" width="656"/></span></p>
<p style="text-align: center;">[Dynamic content visualization &amp; verification]</p>
<p style="text-align: center;">[動態內容可視化和驗證<span>]</span></p>
<p>Finally, we need to prepare the robot so that we can easily attach a gripper to it, or easily attach the robot to a mobile platform (for instance). Two dynamically enabled shapes can be rigidly attached to each other in two different ways:</p>
<p> <strong>by grouping them:</strong> select the shapes, then [Menu bar --&gt; Edit --&gt; Grouping/Merging --&gt; Group selected shapes].</p>
<p> <strong>by attaching them via a force/torque sensor:</strong> a force torque sensor can also act as a rigid link between two separate dynamically enabled shapes.</p>
<p> In our case, only option 2 is of interest. We create<span style="color: #ff0000;"><strong> a force/torque sensor</strong> </span>with [Menu bar --&gt; Add --&gt; Force sensor], then move it to the tip of the robot, then attach it to object robot_link_dyn6. We change its size and visual appearance appropriately (a red force/torque sensor is often perceived as an optional attachment point, check the various robot models available). We also change its name to robot_attachment:</p>
<p> 最後，我們需要準備機器人，以便我們可以輕鬆地將抓取器連接到它，或輕鬆地將機器人連接到移動平台（例如）。可以通過兩種不同的方式將兩個動態啟用的形狀嚴格地彼此附加：</p>
<p><strong>通過對它們進行分組：</strong>選擇形狀，然後選擇<span>[</span>菜單欄<span>-&gt;</span>編輯<span>-&gt;</span>分組<span>/</span>合併<span>-&gt;</span>對選定形狀進行分組<span>]</span>。</p>
<p> <strong>通過力<span>/</span>扭矩傳感器進行連接：</strong>力扭矩傳感器還可以充當兩個單獨的動態啟用形狀之間的剛性鏈接。</p>
<p> 在我們的情況下，只有選項<span>2</span>是有意義的。我們使用<span>[</span>菜單欄<span>-&gt;</span>添加<span>-&gt;</span>力傳感器<span>]</span>創建一個<span style="color: #ff0000;"><strong>力/扭矩傳感器</strong></span>，然後將其移動到機器人的尖端，然後將其附加到對象<span>robot_link_dyn6</span>。我們會適當地更改其尺寸和外觀（紅色力<span>/</span>扭矩傳感器通常被視為可選的連接點，請檢查可用的各種機器人型號）。我們還將其名稱更改為<span>robot_attachment</span>：</p>
<p style="text-align: left;"><span><img alt="" height="519" src="/images/5.jpg" width="656"/></span></p>
<p style="text-align: center;">[Attachment force/torque sensor]</p>
<p style="text-align: center;">[附著力<span>/</span>扭矩傳感器<span>]</span></p>
<p>Now we drag a gripper model into the scene, keep it selected, then control-click the attachment force sensor, then click the<span style="color: #ff0000;"> <strong>Assembling/disassembling toolbar button</strong></span>. The gripper goes into place:</p>
<p> 現在，我們將抓手模型拖到場景中，使其保持選中狀態，然後按住<span>Control</span>鍵單擊並單擊附著力傳感器，然後單擊<span style="color: #ff0000;">“<strong>裝配/拆卸”工具欄按鈕</strong></span>。夾持器到位：</p>
<p><img alt="" height="325" src="/images/6.jpg" width="450"/></p>
<p style="text-align: center;">[Attached gripper]</p>
<p style="text-align: center;">[附帶的爪子<span>]</span></p>
<p>The gripper knew how to attach itself because it was appropriately configured during its model definition. We now also need to properly configure the robot model, so that it will know how to attach itself to a mobile base for instance. We select the robot model, then click <strong>Assembling</strong> in the<span style="color: #ff0000;"> <strong>object common properties</strong></span>. Set an empty string for <strong>'Parent' </strong>match values, then click<strong> Set matrix</strong>. This will memorize the current base object's local transformation matrix, and use it to position/orient itself relative to the mobile robot's attachment point. To verify that we did things right, we drag the model Models/robots/mobile/KUKA Omnirob.ttm into the scene. Then we select our robot model, then control-click one of the attachment points on the mobile platform, then click the<span style="color: #ff0000;"> <strong>Assembling/disassembling toolbar button</strong></span>. Our robot should correctly place itself on top of the mobile robot:</p>
<p> 抓具知道如何附加自身，因為它在模型定義期間進行了適當的配置。 現在，我們還需要正確配置機器人模型，以便它將知道如何將自己附加到移動基座上。 我們選擇機器人模型，然後在<span style="color: #ff0000;"><strong>對象公共屬性</strong></span>中單擊<strong>“組裝”</strong>。 為“<strong>父項”匹配值</strong>設置一個空字符串，然後單擊“設置矩陣”。 這將記住當前基礎對象的局部轉換矩陣，並使用它相對於移動機器人的附著點定位<span>/</span>定向。 為了驗證我們做的正確，我們將模型<span>Models / robots / mobile / KUKA Omnirob.ttm</span>拖到場景中。 然後，我們選擇機器人模型，然後在移動平台上按住<span>Control</span>鍵並單擊其中一個附接點，然後單擊<span style="color: #ff0000;"><strong>“組裝/拆卸”工具欄按鈕</strong></span>。 我們的機器人應該正確地將自己放置在移動機器人的頂部：</p>
<p><img alt="" height="550" src="/images/7.jpg" width="365"/></p>
<p style="text-align: center;">[Attached robot]</p>
<p style="text-align: center;">[附帶的機器人<span>]</span></p>
<p>Now we could add additional items to our robot, such as sensors for instance. At some point we might also want to attach<span style="color: #ff0000;"><strong> embedded scripts</strong> </span>to our model, in order to control its behaviour or configure it for various purposes. In that case, make sure to understand how object handles are accessed from embedded scripts. We can also control/access/interface our model from a<span style="color: #ff0000;"> <strong>plugin</strong></span>, from a<span style="color: #ff0000;"> <strong>remote API</strong> </span>client, from a <span style="color: #ff0000;"><strong>ROS</strong></span> node, from a <span style="color: #ff0000;"><strong>BlueZero</strong></span> node, or from an <span style="color: #ff0000;"><strong>add-on</strong></span>.</p>
<p> 現在，我們可以向機器人添加其他項目，例如傳感器。在某些時候，我們可能還希望將<span style="color: #ff0000;"><strong>嵌入式腳本</strong></span>附加到我們的模型中，以便控制其行為或出於各種目的對其進行配置。在這種情況下，請確保了解如<span style="color: #ff0000;"><strong>何從嵌入式腳本訪問對象句柄</strong></span>。我們還可以通過<span style="color: #ff0000;"><strong>插件</strong></span>，<span style="color: #ff0000;"><strong>遠程API</strong></span>客戶端，<span style="color: #ff0000;"><strong>ROS</strong></span>節點，<span style="color: #ff0000;"><strong>BlueZero</strong></span>節點或<span style="color: #ff0000;"><strong>附加組件</strong></span>來控制<span>/</span>訪問<span>/</span>接口模型。</p>
<p> Now we make sure we have reverted the changes done during robot and gripper attachment, we collapse the hierarchy tree of our robot model, select the base of our model, then save it with [Menu bar --&gt; File --&gt; Save model as...]. If we saved it in the model folder, then the model will be available in the<span style="color: #ff0000;"><strong> model brower</strong></span>.</p>
<p>現在，確保已恢復在機械手和抓爪安裝過程中所做的更改，我們折疊了機械手模型的層次樹，選擇了模型的基礎，然後使用<span>[</span>菜單欄<span>-&gt;</span>文件<span>-&gt;</span>將模型另存為<span>...]</span>。如果我們將其保存在模型文件夾中，則模型將在<span style="color: #ff0000;"><strong>模型瀏覽器</strong></span>中可用。</p>